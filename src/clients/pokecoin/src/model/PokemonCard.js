/**
 * Pokecoin
 * The Pokecoin documentation
 *
 * The version of the OpenAPI document: 1.5.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TheAbilitySchema from './TheAbilitySchema';
import TheItemsSchema from './TheItemsSchema';
import TheItemsSchema1 from './TheItemsSchema1';

/**
 * The PokemonCard model module.
 * @module model/PokemonCard
 * @version 1.5.4
 */
class PokemonCard {
    /**
     * Constructs a new <code>PokemonCard</code>.
     * A Pokemon card
     * @alias module:model/PokemonCard
     * @param id {String} 
     * @param name {String} 
     */
    constructor(id, name) { 
        
        PokemonCard.initialize(this, id, name);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, name) { 
        obj['id'] = id;
        obj['name'] = name;
    }

    /**
     * Constructs a <code>PokemonCard</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PokemonCard} obj Optional instance to populate.
     * @return {module:model/PokemonCard} The populated <code>PokemonCard</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PokemonCard();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('imageUrl')) {
                obj['imageUrl'] = ApiClient.convertToType(data['imageUrl'], 'String');
            }
            if (data.hasOwnProperty('subtype')) {
                obj['subtype'] = ApiClient.convertToType(data['subtype'], 'String');
            }
            if (data.hasOwnProperty('supertype')) {
                obj['supertype'] = ApiClient.convertToType(data['supertype'], 'String');
            }
            if (data.hasOwnProperty('number')) {
                obj['number'] = ApiClient.convertToType(data['number'], 'String');
            }
            if (data.hasOwnProperty('artist')) {
                obj['artist'] = ApiClient.convertToType(data['artist'], 'String');
            }
            if (data.hasOwnProperty('rarity')) {
                obj['rarity'] = ApiClient.convertToType(data['rarity'], 'String');
            }
            if (data.hasOwnProperty('series')) {
                obj['series'] = ApiClient.convertToType(data['series'], 'String');
            }
            if (data.hasOwnProperty('set')) {
                obj['set'] = ApiClient.convertToType(data['set'], 'String');
            }
            if (data.hasOwnProperty('setCode')) {
                obj['setCode'] = ApiClient.convertToType(data['setCode'], 'String');
            }
            if (data.hasOwnProperty('imageUrlHiRes')) {
                obj['imageUrlHiRes'] = ApiClient.convertToType(data['imageUrlHiRes'], 'String');
            }
            if (data.hasOwnProperty('text')) {
                obj['text'] = ApiClient.convertToType(data['text'], ['String']);
            }
            if (data.hasOwnProperty('level')) {
                obj['level'] = ApiClient.convertToType(data['level'], 'String');
            }
            if (data.hasOwnProperty('evolvesFrom')) {
                obj['evolvesFrom'] = ApiClient.convertToType(data['evolvesFrom'], 'String');
            }
            if (data.hasOwnProperty('ability')) {
                obj['ability'] = TheAbilitySchema.constructFromObject(data['ability']);
            }
            if (data.hasOwnProperty('hp')) {
                obj['hp'] = ApiClient.convertToType(data['hp'], 'String');
            }
            if (data.hasOwnProperty('retreatCost')) {
                obj['retreatCost'] = ApiClient.convertToType(data['retreatCost'], ['String']);
            }
            if (data.hasOwnProperty('convertedRetreatCost')) {
                obj['convertedRetreatCost'] = ApiClient.convertToType(data['convertedRetreatCost'], 'Number');
            }
            if (data.hasOwnProperty('types')) {
                obj['types'] = ApiClient.convertToType(data['types'], ['String']);
            }
            if (data.hasOwnProperty('attacks')) {
                obj['attacks'] = ApiClient.convertToType(data['attacks'], [TheItemsSchema]);
            }
            if (data.hasOwnProperty('weaknesses')) {
                obj['weaknesses'] = ApiClient.convertToType(data['weaknesses'], [TheItemsSchema1]);
            }
            if (data.hasOwnProperty('nationalPokedexNumber')) {
                obj['nationalPokedexNumber'] = ApiClient.convertToType(data['nationalPokedexNumber'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PokemonCard</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PokemonCard</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PokemonCard.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['imageUrl'] && !(typeof data['imageUrl'] === 'string' || data['imageUrl'] instanceof String)) {
            throw new Error("Expected the field `imageUrl` to be a primitive type in the JSON string but got " + data['imageUrl']);
        }
        // ensure the json data is a string
        if (data['subtype'] && !(typeof data['subtype'] === 'string' || data['subtype'] instanceof String)) {
            throw new Error("Expected the field `subtype` to be a primitive type in the JSON string but got " + data['subtype']);
        }
        // ensure the json data is a string
        if (data['supertype'] && !(typeof data['supertype'] === 'string' || data['supertype'] instanceof String)) {
            throw new Error("Expected the field `supertype` to be a primitive type in the JSON string but got " + data['supertype']);
        }
        // ensure the json data is a string
        if (data['number'] && !(typeof data['number'] === 'string' || data['number'] instanceof String)) {
            throw new Error("Expected the field `number` to be a primitive type in the JSON string but got " + data['number']);
        }
        // ensure the json data is a string
        if (data['artist'] && !(typeof data['artist'] === 'string' || data['artist'] instanceof String)) {
            throw new Error("Expected the field `artist` to be a primitive type in the JSON string but got " + data['artist']);
        }
        // ensure the json data is a string
        if (data['rarity'] && !(typeof data['rarity'] === 'string' || data['rarity'] instanceof String)) {
            throw new Error("Expected the field `rarity` to be a primitive type in the JSON string but got " + data['rarity']);
        }
        // ensure the json data is a string
        if (data['series'] && !(typeof data['series'] === 'string' || data['series'] instanceof String)) {
            throw new Error("Expected the field `series` to be a primitive type in the JSON string but got " + data['series']);
        }
        // ensure the json data is a string
        if (data['set'] && !(typeof data['set'] === 'string' || data['set'] instanceof String)) {
            throw new Error("Expected the field `set` to be a primitive type in the JSON string but got " + data['set']);
        }
        // ensure the json data is a string
        if (data['setCode'] && !(typeof data['setCode'] === 'string' || data['setCode'] instanceof String)) {
            throw new Error("Expected the field `setCode` to be a primitive type in the JSON string but got " + data['setCode']);
        }
        // ensure the json data is a string
        if (data['imageUrlHiRes'] && !(typeof data['imageUrlHiRes'] === 'string' || data['imageUrlHiRes'] instanceof String)) {
            throw new Error("Expected the field `imageUrlHiRes` to be a primitive type in the JSON string but got " + data['imageUrlHiRes']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['text'])) {
            throw new Error("Expected the field `text` to be an array in the JSON data but got " + data['text']);
        }
        // ensure the json data is a string
        if (data['level'] && !(typeof data['level'] === 'string' || data['level'] instanceof String)) {
            throw new Error("Expected the field `level` to be a primitive type in the JSON string but got " + data['level']);
        }
        // ensure the json data is a string
        if (data['evolvesFrom'] && !(typeof data['evolvesFrom'] === 'string' || data['evolvesFrom'] instanceof String)) {
            throw new Error("Expected the field `evolvesFrom` to be a primitive type in the JSON string but got " + data['evolvesFrom']);
        }
        // validate the optional field `ability`
        if (data['ability']) { // data not null
          TheAbilitySchema.validateJSON(data['ability']);
        }
        // ensure the json data is a string
        if (data['hp'] && !(typeof data['hp'] === 'string' || data['hp'] instanceof String)) {
            throw new Error("Expected the field `hp` to be a primitive type in the JSON string but got " + data['hp']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['retreatCost'])) {
            throw new Error("Expected the field `retreatCost` to be an array in the JSON data but got " + data['retreatCost']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['types'])) {
            throw new Error("Expected the field `types` to be an array in the JSON data but got " + data['types']);
        }
        if (data['attacks']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['attacks'])) {
                throw new Error("Expected the field `attacks` to be an array in the JSON data but got " + data['attacks']);
            }
            // validate the optional field `attacks` (array)
            for (const item of data['attacks']) {
                TheItemsSchema.validateJsonObject(item);
            };
        }
        if (data['weaknesses']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['weaknesses'])) {
                throw new Error("Expected the field `weaknesses` to be an array in the JSON data but got " + data['weaknesses']);
            }
            // validate the optional field `weaknesses` (array)
            for (const item of data['weaknesses']) {
                TheItemsSchema1.validateJsonObject(item);
            };
        }

        return true;
    }


}

PokemonCard.RequiredProperties = ["id", "name"];

/**
 * @member {String} id
 */
PokemonCard.prototype['id'] = undefined;

/**
 * @member {String} name
 */
PokemonCard.prototype['name'] = undefined;

/**
 * @member {String} imageUrl
 */
PokemonCard.prototype['imageUrl'] = undefined;

/**
 * @member {String} subtype
 */
PokemonCard.prototype['subtype'] = undefined;

/**
 * @member {String} supertype
 */
PokemonCard.prototype['supertype'] = undefined;

/**
 * @member {String} number
 */
PokemonCard.prototype['number'] = undefined;

/**
 * @member {String} artist
 */
PokemonCard.prototype['artist'] = undefined;

/**
 * @member {String} rarity
 * @default ''
 */
PokemonCard.prototype['rarity'] = '';

/**
 * @member {String} series
 */
PokemonCard.prototype['series'] = undefined;

/**
 * @member {String} set
 */
PokemonCard.prototype['set'] = undefined;

/**
 * @member {String} setCode
 */
PokemonCard.prototype['setCode'] = undefined;

/**
 * @member {String} imageUrlHiRes
 */
PokemonCard.prototype['imageUrlHiRes'] = undefined;

/**
 * @member {Array.<String>} text
 */
PokemonCard.prototype['text'] = undefined;

/**
 * @member {String} level
 */
PokemonCard.prototype['level'] = undefined;

/**
 * @member {String} evolvesFrom
 */
PokemonCard.prototype['evolvesFrom'] = undefined;

/**
 * @member {module:model/TheAbilitySchema} ability
 */
PokemonCard.prototype['ability'] = undefined;

/**
 * @member {String} hp
 */
PokemonCard.prototype['hp'] = undefined;

/**
 * @member {Array.<String>} retreatCost
 */
PokemonCard.prototype['retreatCost'] = undefined;

/**
 * @member {Number} convertedRetreatCost
 */
PokemonCard.prototype['convertedRetreatCost'] = undefined;

/**
 * @member {Array.<String>} types
 */
PokemonCard.prototype['types'] = undefined;

/**
 * @member {Array.<module:model/TheItemsSchema>} attacks
 */
PokemonCard.prototype['attacks'] = undefined;

/**
 * @member {Array.<module:model/TheItemsSchema1>} weaknesses
 */
PokemonCard.prototype['weaknesses'] = undefined;

/**
 * @member {Number} nationalPokedexNumber
 */
PokemonCard.prototype['nationalPokedexNumber'] = undefined;






export default PokemonCard;

