/**
 * Pokecoin
 * The Pokecoin documentation
 *
 * The version of the OpenAPI document: 1.5.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The TheItemsSchema model module.
 * @module model/TheItemsSchema
 * @version 1.5.4
 */
class TheItemsSchema {
    /**
     * Constructs a new <code>TheItemsSchema</code>.
     * @alias module:model/TheItemsSchema
     * @param name {String} 
     * @param cost {Array.<String>} 
     * @param convertedEnergyCost {Number} 
     * @param damage {String} 
     */
    constructor(name, cost, convertedEnergyCost, damage) { 
        
        TheItemsSchema.initialize(this, name, cost, convertedEnergyCost, damage);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name, cost, convertedEnergyCost, damage) { 
        obj['name'] = name || '';
        obj['cost'] = cost;
        obj['convertedEnergyCost'] = convertedEnergyCost;
        obj['damage'] = damage;
    }

    /**
     * Constructs a <code>TheItemsSchema</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TheItemsSchema} obj Optional instance to populate.
     * @return {module:model/TheItemsSchema} The populated <code>TheItemsSchema</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TheItemsSchema();

            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('cost')) {
                obj['cost'] = ApiClient.convertToType(data['cost'], ['String']);
            }
            if (data.hasOwnProperty('convertedEnergyCost')) {
                obj['convertedEnergyCost'] = ApiClient.convertToType(data['convertedEnergyCost'], 'Number');
            }
            if (data.hasOwnProperty('damage')) {
                obj['damage'] = ApiClient.convertToType(data['damage'], 'String');
            }
            if (data.hasOwnProperty('text')) {
                obj['text'] = ApiClient.convertToType(data['text'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TheItemsSchema</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TheItemsSchema</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of TheItemsSchema.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['cost'])) {
            throw new Error("Expected the field `cost` to be an array in the JSON data but got " + data['cost']);
        }
        // ensure the json data is a string
        if (data['damage'] && !(typeof data['damage'] === 'string' || data['damage'] instanceof String)) {
            throw new Error("Expected the field `damage` to be a primitive type in the JSON string but got " + data['damage']);
        }
        // ensure the json data is a string
        if (data['text'] && !(typeof data['text'] === 'string' || data['text'] instanceof String)) {
            throw new Error("Expected the field `text` to be a primitive type in the JSON string but got " + data['text']);
        }

        return true;
    }


}

TheItemsSchema.RequiredProperties = ["name", "cost", "convertedEnergyCost", "damage"];

/**
 * @member {String} name
 * @default ''
 */
TheItemsSchema.prototype['name'] = '';

/**
 * @member {Array.<String>} cost
 */
TheItemsSchema.prototype['cost'] = undefined;

/**
 * @member {Number} convertedEnergyCost
 */
TheItemsSchema.prototype['convertedEnergyCost'] = undefined;

/**
 * @member {String} damage
 */
TheItemsSchema.prototype['damage'] = undefined;

/**
 * @member {String} text
 */
TheItemsSchema.prototype['text'] = undefined;






export default TheItemsSchema;

